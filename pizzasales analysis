create database pizzahut;
use pizzahut;
drop database pizzhut;
create table orders(
order_id int primary key,
order_date date not null,
order_time time not null);
drop table order_details;
create table order_details(
order_details_id int primary key not null,
order_id int not null,
pizza_id varchar(100) not null,
quanitiy int not null);

-- TOTAL NUMBER OF ORDERS PLACED
select count(order_id) as total_orders from orders;

-- TOTAL REVENUE GENERATED FROM PIZZA SALES
select sum(order_details.quanitiy * pizzas.price)as total_revenue from
order_details join pizzas on 
pizzas.pizza_id = order_details.pizza_id;

-- IDENTIFY THE HIGHEST-PRICE PIZZA
select pizza_type_id , price from pizzas order by price desc limit 1;
show errors; 
select database();
show databases;
use pizzahut;
select* from pizzas;
-- MOST ORDERED PIZZA SIZE
select pizzas.size, count( order_details.order_details_id) as order_count
from pizzas join order_details
 on pizzas.pizza_id = order_details.pizza_id group by pizzas.size order by order_count desc ;
 
--  list the top5 most ordered pizza types along with their quantities
select pizza_types.name,sum(order_details.quanitiy ) as quantity from pizza_types join pizzas on pizza_types.pizza_type_id = pizzas.pizza_type_id 
join order_details on order_details.pizza_id = pizzas.pizza_id
group by pizza_types.name order by quantity desc limit 5 ;

-- total quantity of each pizza category ordered
select pizza_types.category, sum(order_details.quanitiy) as quantity from pizza_types join pizzas on pizza_types.pizza_type_id = pizzas.pizza_type_id
join order_details on pizzas.pizza_id = order_details.pizza_id group by  pizza_types.category order by quantity desc;

-- determine the distribution of the orders by hour of the day
select hour(order_time), count(order_id) from orders group by  hour(order_time); 
 
--   find the category wise distribution of pizza
select category, count(name) from pizza_types group by category;

-- group the order by date and cal. the avg. number of pizzs ordered per day
select round( avg(quantity),0) from
(select orders.order_date, sum(order_details.quanitiy) as quantity from orders join order_details 
on orders.order_id = order_details.order_id group by orders.order_date) as order_quantity ;

-- determine the top3 most ordered pizza type based on revenue
select pizza_types.name, sum(order_details.quanitiy * pizzas.price) as revenue from pizza_types join pizzas
on pizzas.pizza_type_id = pizza_types.pizza_type_id join order_details on
order_details.pizza_id = pizzas.pizza_id group by  pizza_types.name order by revenue desc limit 3 ;

-- cal. the percentage contribution of each pizza type to total revenue
select pizza_types.category, round(sum(order_details.quanitiy * pizzas.price) / (select round(sum(order_details.quanitiy * pizzas.price),2)
 as total_sales from order_details join pizzas on pizzas.pizza_id = order_details.pizza_id) * 100,2) as revenue
 from pizza_types join pizzas 
on pizza_types.pizza_type_id = pizzas.pizza_type_id join order_details 
on order_details.pizza_id = pizzas.pizza_id group by pizza_types.category order by revenue desc;

-- analyze the cumulative revenue generated over time
select order_date, sum(revenue) over(order by order_date) as cumulative_revenue from
(select orders.order_date, sum(order_details.quanitiy * pizzas.price) as revenue from order_details join pizzas
on order_details.pizza_id = pizzas.pizza_id join orders on orders.order_id = order_details.order_id group by orders.order_date) as sales;

-- determine the top 3 most odered pizza types based on revenue for each pizza category
select name, revenue from 
(select category, name, revenue, rank() over(partition by category order by revenue desc) as rn from
(select pizza_types.category, pizza_types.name,  sum(order_details.quanitiy * pizzas.price) as revenue from pizza_types join pizzas
on pizza_types.pizza_type_id = pizzas.pizza_type_id join order_details on
order_details.pizza_id = pizzas.pizza_id group by  pizza_types.category, pizza_types.name) as a) as b  where rn<=3;  
 























